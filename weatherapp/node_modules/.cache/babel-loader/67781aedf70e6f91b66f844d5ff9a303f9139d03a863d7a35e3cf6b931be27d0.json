{"ast":null,"code":"var _jsxFileName = \"/home/mugetsu/Desktop/react-tut/weatherapp/src/context/CityContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { CountryContext } from \"./CountryContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityContext = /*#__PURE__*/createContext();\nexport const CityProvider = ({\n  children\n}) => {\n  _s();\n  const [cities, setCities] = useState([null]);\n  const [setSelectedCountry] = useContext(CountryContext);\n  const fetchCities = async country => {\n    try {\n      const response = await fetch('https://countriesnow.space/api/v0.1/countries/population/cities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          country\n        })\n      });\n      const data = await response.json();\n      setCities(data.data.cities); // Şehirleri state'e kaydet\n    } catch (error) {\n      console.error(\"Şehir verileri alınamadı:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CityContext.Provider, {\n    value: {\n      cities\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(CityProvider, \"gWIMx0gwjFogMTG+A7ml5bp+/jw=\");\n_c = CityProvider;\nvar _c;\n$RefreshReg$(_c, \"CityProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","axios","CountryContext","jsxDEV","_jsxDEV","CityContext","CityProvider","children","_s","cities","setCities","setSelectedCountry","fetchCities","country","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mugetsu/Desktop/react-tut/weatherapp/src/context/CityContext.js"],"sourcesContent":["import { createContext,useState,useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { CountryContext } from \"./CountryContext\";\nconst CityContext = createContext();\n\nexport const CityProvider = ({ children }) => {\n    const [cities, setCities] = useState([null]);\n    const [setSelectedCountry] = useContext(CountryContext);\n\n    const fetchCities = async (country) => {\n        try {\n          const response = await fetch('https://countriesnow.space/api/v0.1/countries/population/cities', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ country })\n          });\n          const data = await response.json();\n          setCities(data.data.cities); // Şehirleri state'e kaydet\n        } catch (error) {\n          console.error(\"Şehir verileri alınamadı:\", error);\n        }\n      };\n\n      return (\n        <CityContext.Provider value={{ cities }}>\n          {children}\n        </CityContext.Provider>\n        );\n    }"],"mappings":";;AAAA,SAASA,aAAa,EAACC,QAAQ,EAACC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACpE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClD,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;EAC5C,MAAM,CAACa,kBAAkB,CAAC,GAAGX,UAAU,CAACE,cAAc,CAAC;EAEvD,MAAMU,WAAW,GAAG,MAAOC,OAAO,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iEAAiE,EAAE;QAC9FC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAQ,CAAC;MAClC,CAAC,CAAC;MACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCZ,SAAS,CAACW,IAAI,CAACA,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEnB,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB;IAAO,CAAE;IAAAF,QAAA,EACrCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAAtB,EAAA,CAzBQF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
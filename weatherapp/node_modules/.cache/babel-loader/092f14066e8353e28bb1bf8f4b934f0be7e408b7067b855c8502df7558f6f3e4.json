{"ast":null,"code":"var _jsxFileName = \"/home/mugetsu/Desktop/react-tut/weatherapp/src/context/CityContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useContext } from \"react\";\nimport { CountryContext } from \"./CountryContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityContext = /*#__PURE__*/createContext();\nexport const CityProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    selectedCountry\n  } = useContext(CountryContext);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  useEffect(() => {\n    const fetchCities = async () => {\n      // selectedCountry kontrolü\n      console.log(\"Selected Country:\", selectedCountry);\n      if (selectedCountry) {\n        try {\n          const response = await axios.post(\"https://countriesnow.space/api/v0.1/countries/cities\", {\n            country: selectedCountry // Doğru yapı\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          console.log(\"API Response:\", response.data); // API yanıtını konsola yazdır\n\n          // API yanıtından şehirleri ayıklayın\n          setCities(response.data.data); // response.data.data'dan şehirleri alın\n        } catch (error) {\n          console.error(\"Şehir verileri alınamadı:\", error);\n        }\n      } else {\n        console.log(\"No country selected.\");\n      }\n    };\n    fetchCities();\n  }, [selectedCountry]); // selectedCountry değiştiğinde bu useEffect tetiklenir\n  return /*#__PURE__*/_jsxDEV(CityContext.Provider, {\n    value: {\n      cities,\n      selectedCity,\n      setSelectedCity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CityProvider, \"jkKdbvyhL6UIkNDp3eM2xX1/v8k=\");\n_c = CityProvider;\nvar _c;\n$RefreshReg$(_c, \"CityProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","axios","useContext","CountryContext","jsxDEV","_jsxDEV","CityContext","CityProvider","children","_s","selectedCountry","cities","setCities","selectedCity","setSelectedCity","fetchCities","console","log","response","post","country","headers","data","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mugetsu/Desktop/react-tut/weatherapp/src/context/CityContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useContext } from \"react\";\nimport { CountryContext } from \"./CountryContext\";\n\nconst CityContext = createContext();\n\nexport const CityProvider = ({ children }) => {\n  const { selectedCountry } = useContext(CountryContext);\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  useEffect(() => {\n    const fetchCities = async () => {\n      // selectedCountry kontrolü\n      console.log(\"Selected Country:\", selectedCountry);\n\n      if (selectedCountry) {\n        try {\n          const response = await axios.post(\"https://countriesnow.space/api/v0.1/countries/cities\", {\n            country: selectedCountry, // Doğru yapı\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          });\n\n          console.log(\"API Response:\", response.data); // API yanıtını konsola yazdır\n\n          // API yanıtından şehirleri ayıklayın\n          setCities(response.data.data); // response.data.data'dan şehirleri alın\n        } catch (error) {\n          console.error(\"Şehir verileri alınamadı:\", error);\n        }\n      } else {\n        console.log(\"No country selected.\");\n      }\n    };\n\n    fetchCities();\n  }, [selectedCountry]); // selectedCountry değiştiğinde bu useEffect tetiklenir\n   return (\n    <CityContext.Provider value={{ cities, selectedCity, setSelectedCity }}>\n      {children}\n    </CityContext.Provider>\n  );\n}\n  \n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,cAAc,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC;EAAgB,CAAC,GAAGR,UAAU,CAACC,cAAc,CAAC;EACtD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpDC,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B;MACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,eAAe,CAAC;MAEjD,IAAIA,eAAe,EAAE;QACnB,IAAI;UACF,MAAMQ,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,sDAAsD,EAAE;YACxFC,OAAO,EAAEV,eAAe,CAAE;UAC5B,CAAC,EAAE;YACDW,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC,CAAC;UAEFL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;;UAE7C;UACAV,SAAS,CAACM,QAAQ,CAACI,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;MACF,CAAC,MAAM;QACLP,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACrC;IACF,CAAC;IAEDF,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACL,eAAe,CAAC,CAAC,CAAC,CAAC;EACtB,oBACCL,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEd,MAAM;MAAEE,YAAY;MAAEC;IAAgB,CAAE;IAAAN,QAAA,EACpEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAApB,EAAA,CAtCYF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
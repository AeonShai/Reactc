{"ast":null,"code":"var _jsxFileName = \"/home/mugetsu/Desktop/react-tut/weatherapp/src/context/CountryContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryContext = /*#__PURE__*/createContext();\nexport const CountryProvider = ({\n  children\n}) => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const url = 'https://countriesnow.space/api/v0.1/countries';\n    const fetchCities = async () => {\n      try {\n        const response = await axios.get(url);\n        const countryNames = response.data.data.map(country => country.name);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    fetchCities();\n  }, []);\n  console.log(countries.country);\n  return /*#__PURE__*/_jsxDEV(CountryContext.Provider, {\n    value: {\n      countries\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(CountryProvider, \"u5xOCJaVOCLA9QSfvEC1BLxOVIw=\");\n_c = CountryProvider;\nvar _c;\n$RefreshReg$(_c, \"CountryProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","CountryContext","CountryProvider","children","_s","countries","setCountries","url","fetchCities","response","get","countryNames","data","map","country","name","err","console","error","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mugetsu/Desktop/react-tut/weatherapp/src/context/CountryContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst CountryContext = createContext();\n\nexport const CountryProvider = ({ children }) => {\n    const [countries, setCountries] = useState([]);\n    useEffect(() => {\n        const url = 'https://countriesnow.space/api/v0.1/countries'\n        const fetchCities = async () => {\n            try{\n                const response = await axios.get(url);\n                const countryNames = response.data.data.map((country) => country.name);\n\n            }catch(err){\n                console.error(err);\n            }\n        }\n        fetchCities();\n\n    } , []);\n    console.log(countries.country);\n    return (\n        <CountryContext.Provider value={{ countries }}>\n            {children}\n        </CountryContext.Provider>\n    );\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMO,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9CC,SAAS,CAAC,MAAM;IACZ,MAAMU,GAAG,GAAG,+CAA+C;IAC3D,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAG;QACC,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACH,GAAG,CAAC;QACrC,MAAMI,YAAY,GAAGF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACC,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,CAAC;MAE1E,CAAC,QAAMC,GAAG,EAAC;QACPC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACtB;IACJ,CAAC;IACDR,WAAW,CAAC,CAAC;EAEjB,CAAC,EAAG,EAAE,CAAC;EACPS,OAAO,CAACE,GAAG,CAACd,SAAS,CAACS,OAAO,CAAC;EAC9B,oBACId,OAAA,CAACC,cAAc,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB;IAAU,CAAE;IAAAF,QAAA,EACzCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAElC,CAAC;AAAArB,EAAA,CAtBYF,eAAe;AAAAwB,EAAA,GAAfxB,eAAe;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}